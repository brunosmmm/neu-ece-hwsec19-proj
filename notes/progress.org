#+TITLE: Project progress tracking

* Journal
** <2019-11-06 Wed>
   Implemented the simon reference implementation as RoCC accelerator in riscv-isa-sim today. Many problems arose
   due to the now very apparent lack of support for rocc accelerators in the simulator.

   Problems faced:
   + gcc toolchain does not support custom instructions :: apparently when RISC-V support was upstreamed, support for
        custom instructions was dropped, so can't do `asm volatile ("custom...")`. Workaround is extremely hacky, build
        instruction words by hand and bypass the assembler altogether. Was able to get working by using implementation in
        submodule that was included in the repository.
   + risc-v pk doesn't like custom instructions :: according to instructions, one had to patch risc-v pk to enable custom
        instructions extension. I did that, however, I think that this is not necessary. (TODO verify)
   + extremely awkard to compile rocc as extension :: the scheme is to compile in-tree in the riscv-isa-sim source code.
        this is extremely annoying. Solved by making a hack where a shared library is compiled. This requires me to compile
        the ISS with the -fPIC flag, which is apparently very bad. (post on github recommends -fPIC with -fvisibility=protected).
        Unsure if this is 100% needed (TODO verify)
** <2019-11-07 Thu>
   Abstracted more of the functional simon implementation into a base that is derived for both ROCC and MMIO accelerator usage.
   implemented a wrapper for MMIO loadable shared library in spike. loading works, but accessing the peripheral does not work
   due to memory address translation issues. tl;dr risc-v pk doesnt work for physical memory address at all. Tried my best to
   compile a fully bare metal example of MMIO usage, but it doesn't work at all, generating a write access CPU fault. I don't
   want to write an assembly example just to verify this thing, however, that might be unavoidable. Due to these pk limitations,
   I am pretty certain that the same problems will occur when trying to run the RTL emulator. Three possible solutions:
   + Discover how to compile bare metal example successfully
   + Write assembly code
   + Run linux on simulator/emulator (!) and use mmap()
** <2019-11-08 Fri>
   Implemented salsa rocc, works more or less. there is some pointer math wrong somewhere in the implementation, as I get different
   ciphertexts depending on the architecture that the implementation is run. the algorithm itself is correct since it can encrypt
   and then decrypt correctly.
   Started work on RTL version of Simon today. I'm writing verilog because that is what I am used to. It is pretty painful, there is
   a lot of code to be written, and the fact that I am also writing a dual 64/128 128/128 acc also does not help. Core has been
   written, need to write wrappers and test. If that works, I'll move to rewriting the accelerators in Chisel due to the way that
   they are supposed to integrate in chipyard.
** <2019-11-11 Mon>
   Finished implementation of Simon in verilog.
** <2019-11-12 Tue>
   Chisel implementation of Simon is successful. Now I need to properly instantiate it inside the proper wrappers provided by chipyard
** <2019-11-13 Wed>
   Integrated MMIO accelerator into rocket chip generator. Doesn't work, chisel implementation of simon core is faulty,
   TODO write a verilog testbench for this thing. Also fixed the bare metal example compilation and tested with MMIO
   functional simulation in Spike
** <2019-11-15 Fri>
   MMIO chisel accelerator working in emulated processor running bare metal application.
** <2019-11-19 Tue>
   Got RoCC working yesterday. Tried building a system with BOOM but fails with RoCC accelerator
** <2019-11-20 Wed>
   Toosly cryptoapplication completed. BOOM build is successful with some hacking. Still to verify that it doesnt
   break rocketchip based design.
* To-do list
** TODO Low-priority [3/3]
*** DONE verify if risc-v pk needs patching to work
    CLOSED: [2019-11-07 Thu 15:38]
    It doesnt.
*** DONE verify if riscv-isa-sim needs to be compiled with -fPIC
    CLOSED: [2019-11-08 Fri 10:39]
    This is necessary. I'm not investigating the right way to do it, rocc ext libraries simply wont work withouth this hack
*** DONE write scripts that build submodules in the correct way
    CLOSED: [2019-11-11 Mon 16:40]

** TODO Project Milestones [1/1]
   Properly tracked in github repository
*** DONE Milestone 0
    CLOSED: [2019-11-07 Thu 15:46]
*** TODO Milestone 1
*** TODO Milestone 2
*** TODO Milestone 3
*** TODO Milestone 4
